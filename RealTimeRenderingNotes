` - to open r commands



Two Ways of Rendering


  Deferred Rendering (unrealEngine default) and Forward Rendering

  Deferred gives stable and better performance for more demanding apps
  (weakness is antiAliasing) Temporal Anti Aliasing- causes ghosting frames


  Forward gives simpler and faster performance
  (limited hardware, power) MSAA in forward gives better anti alisainsg



G Buffer - Set of images for each frame, these images contain all info required for later stages of rendering process for real tiem compositing
This happens in background. (Such as depth)


Pixel and Vertex Shaders - 

  General CPU isnt good for tiny little calculations, its pretty slow

  hardware and software handle the shader calculations on the dedicatd part of the GPU


  Pixel shaders handles a bunch of the lighting, fog, rendering materials and shading



Frame Time - 

  millisec is the unit for frames.

  To measure this in the editor - 
    stat fps to show frames
    t.maxfps 600: removes cap on frame rate
    stat unit will give more info
    Game - CPU
      Animations
      Physics
      Collision
      AI
      Spawning/Destroying
      Scale, position, rotations
    GPU
      lighting
      rendering of models
      reflections
      shaders

4 Common performance issues
  Intro to draw calls -
    When environment is rendered, it will render object per object, every models (mesh)
    is a draw call (for simplicity).
  Pixel /Vertex Impact
  Intro to Translucency rendering -
    Has to recalculate everytime a new translucent object is introduced, pixel shader operations are alot in this case
    Shader Complexity is a good tool to use to debug
  shadows -
    It is the dynamic shadows that is costly, not the lighting itself
    Be careful with polygon count of the environment if using dynamic lighting
    Whereas static lighting, or no dynamic lighting, u can have higher polygon count





